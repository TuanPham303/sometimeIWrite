{"version":3,"sources":["components/Border/Border.style.js","components/Border/Border.js","App.js","serviceWorker.js","index.js"],"names":["borderStyles","border1Top","position","top","left","height","width","backgroundColor","border1Right","right","border1Bottom","bottom","border1Left","border2Top","border2Right","border2Bottom","border2Left","withStyles","classes","className","App","defaultProps","styles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAmEeA,EAnEM,CACnBC,WAAY,CACVC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,GACRC,MAAO,QACPC,gBAAiB,QAEnBC,aAAc,CACZN,SAAU,QACVC,IAAK,EACLM,MAAO,EACPJ,OAAQ,QACRC,MAAO,GACPC,gBAAiB,QAEnBG,cAAe,CACbR,SAAU,QACVS,OAAQ,EACRP,KAAM,EACNC,OAAQ,GACRC,MAAO,QACPC,gBAAiB,QAEnBK,YAAa,CACXV,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,QACRC,MAAO,GACPC,gBAAiB,QAEnBM,WAAY,CACVX,SAAU,QACVC,IAAK,GACLC,KAAM,GACNC,OAAQ,GACRC,MAAO,qBACPC,gBAAiB,WAEnBO,aAAc,CACZZ,SAAU,QACVC,IAAK,GACLM,MAAO,GACPJ,OAAQ,qBACRC,MAAO,GACPC,gBAAiB,WAEnBQ,cAAe,CACbb,SAAU,QACVS,OAAQ,GACRP,KAAM,GACNC,OAAQ,GACRC,MAAO,qBACPC,gBAAiB,WAEnBS,YAAa,CACXd,SAAU,QACVC,IAAK,GACLC,KAAM,GACNC,OAAQ,qBACRC,MAAO,GACPC,gBAAiB,YC3CNU,kBAAWjB,EAAXiB,EAff,YAA8B,IAAZC,EAAW,EAAXA,QAChB,OACE,oCACE,yBAAKC,UAAWD,EAAQjB,aACxB,yBAAKkB,UAAWD,EAAQV,eACxB,yBAAKW,UAAWD,EAAQR,gBACxB,yBAAKS,UAAWD,EAAQN,cACxB,yBAAKO,UAAWD,EAAQL,aACxB,yBAAKM,UAAWD,EAAQJ,eACxB,yBAAKK,UAAWD,EAAQH,gBACxB,yBAAKI,UAAWD,EAAQF,kBCR9B,SAASI,EAAT,GAA0B,EAAXF,QACb,OACE,oCACE,kBAAC,EAAD,OASNE,EAAIC,aAAe,CACjBH,QAAS,IAGID,kBAAWK,IAAXL,CAAmBG,GCXdG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d81b7b45.chunk.js","sourcesContent":["const borderStyles = {\n  border1Top: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: 20,\n    width: '100vw',\n    backgroundColor: '#fff',\n  },\n  border1Right: {\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    height: '100vh',\n    width: 20,\n    backgroundColor: '#fff',\n  },\n  border1Bottom: {\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    height: 20,\n    width: '100vw',\n    backgroundColor: '#fff',\n  },\n  border1Left: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: '100vh',\n    width: 20,\n    backgroundColor: '#fff',\n  },\n  border2Top: {\n    position: 'fixed',\n    top: 20,\n    left: 20,\n    height: 20,\n    width: 'calc(100vw - 40px)',\n    backgroundColor: '#f7f7f7',\n  },\n  border2Right: {\n    position: 'fixed',\n    top: 20,\n    right: 20,\n    height: 'calc(100vh - 40px)',\n    width: 20,\n    backgroundColor: '#f7f7f7',\n  },\n  border2Bottom: {\n    position: 'fixed',\n    bottom: 20,\n    left: 20,\n    height: 20,\n    width: 'calc(100vw - 40px)',\n    backgroundColor: '#f7f7f7',\n  },\n  border2Left: {\n    position: 'fixed',\n    top: 20,\n    left: 20,\n    height: 'calc(100vh - 40px)',\n    width: 20,\n    backgroundColor: '#f7f7f7',\n  },\n};\n\nexport default borderStyles;\n","import React from 'react';\nimport withStyles from 'react-jss';\n\nimport borderStyles from './Border.style';\n\nfunction Border({ classes }) {\n  return (\n    <>\n      <div className={classes.border1Top} />\n      <div className={classes.border1Right} />\n      <div className={classes.border1Bottom} />\n      <div className={classes.border1Left} />\n      <div className={classes.border2Top} />\n      <div className={classes.border2Right} />\n      <div className={classes.border2Bottom} />\n      <div className={classes.border2Left} />\n    </>\n  );\n}\n\nexport default withStyles(borderStyles)(Border);\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport PropTypes from 'prop-types';\n\nimport styles from './App.style';\nimport { Border } from './components';\n\nfunction App({ classes }) {\n  return (\n    <>\n      <Border />\n    </>\n  );\n}\n\nApp.propTypes = {\n  classes: PropTypes.object,\n};\n\nApp.defaultProps = {\n  classes: {},\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}